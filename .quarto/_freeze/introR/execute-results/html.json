{
  "hash": "878d5678b861e5b097cf29ce897388e2",
  "result": {
    "markdown": "---\ntitle: \"Introduction to R and RStudio\"\n---\n\n\n## Why R and Not Another Statistical Program?\n\n\n### Statistical Programs versus Statistical Programming Language\n\n* Statistical Programs\n    + fixed menus\n    + limited procedures (at least in the menus)\n    + leads to compartmentalizing models (e.g. ANOVA, regression, GLM)\n    \n* Statistical Programming Languages (SPLs)\n    + Turing complete: if you can create an algorithm you can program it\n    + Very flexible\n    + Integration of models: One model to rule them all!\n\n\nR is a statistical programming language, which means it is a programming language designed specifically to do statistics.\n\n\n## Installing R and RStudio\nThe goal of this chapter is to get  you up and running with the R statistical programming language and the RStudio integrated development environment. \n\nIf you are reading this because you are taking one of my courses, you must decide how you want to use R and RStudio for the course. \nYou have two basic options:\n\n1. you can install them on your own computer, or\n2. you can use Auburn Universities education virtual lab (VLab), online. \n\nIf you have a computer that you will be using consistently for this course, I recommend installing R and RStudio on that computer.\nBoth are free and will be much easier to use if you install them directly on your computer.\nIf you have decided to install the software on your computer you can skip to the following video.\nNote, that you must be a student within the university, and have DUO setup to use VLab.\nIf you think you want to use the virtual lab, watch this video:\n\n[Using VLab to acces R/RStudio](https://nv.instructuremedia.com/fetch/QkFoYkIxc0hhUVNIRGFrSE1Hd3JCeWhUREdFPS0tZjk4ODFlYWEyZWFiNWQwYWYyZDk0YTZjMjljZTJlMjBkNmIwMzE5Yw.mp4)\n\n### Installing R\n\n\n\n### Installing RStudio\n\n## R as a Statistical Programming Language\n\nThis chapter describes R as a statistical programming language to give you some basic concepts to understand how R works.\nSuch concepts will hopefully help you organize what you are learning about R.\nThis is important because you will not be able to memorize all of the things you need to do to use R.\nBut, having some general concepts to hang what you are learning on, should help you build a solid skill foundation.\nThis explanation will be a gross oversimplification of R, but it should be a good starting model of R that you can build on as you master the language.\n\n\n::: {.cell}\n\n:::\n\n\n### Elements of Statistical Programming\n\n\nAn object is a thing that has one or more *states*, and one or more *behaviors.*\nTake for example you cell phone. \nIt has many states, such as on or off, and many behaviors, such as making phone calls, sending texts, or surfing the web.\n**Everything in R is an object**.\nObjects in R are very similar to objects like your cell phone, in that they have states and behaviors.\nOur goal is to learn how to use these objects to help us do science.\n\nThere are basically two types of objects in R: **data objects** and **function objects**.\nData objects store information, while function objects process or manipulate information.\n\n#### Expressions\n\nWe use objects in R through **expressions**.\nAn expression is simply a combination of objects that R can evaluate.\nSo, we type something into R, R processes it and gives us the results.\nFor example, if we type `1 + 2` into the R console, it will give us the result `3`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n\nSo, expressions are simply objects or combinations of objects submitted to R in a way R can evaluate them.\n\n#### Basic Elements of a Good SPL\n\n\n1. a rich set of **primitive expressions**\n2. mechanisms for **combining expressions** into more complex expressions\n3. means of **abstraction**, which allow for naming and manipulating compound objects\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/blocks.jpg){width=40%}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/blockstack.jpg){width=20%}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/sanfran.jpg){width=40%}\n:::\n:::\n\n\n\n### Primitive Expressions\n\n\n* Everything in R is an object\n* Primitive objects are the simplest elements of a programming language, and include:\n    + *primitive data* \n    + *primitive functions*\n    \n* They can be thought of as the basic building blocks for everything else in the language.\n\n* An **expression** is an input that the programming language can evaluate, and consists of function and data objects.\n\n### Primitive Data Types:\n\nData objects are the primary means of storing information in R.\nR has a few basic *data types*:\n\n* **Numeric** - \n    + `numeric`\n        - `int` - integers (`1,2`)\n        - `num` - real number (`1.2, -3.1, 200.0`)\n\n* **character** or **string** - \n    + `character` \n        - `\"Hello world!\"`, `\"Ten\"`, `'Cat'`\n        - `\"This is a sentence, which is a string\"`\n        - `\"10\"` ( in single or double quotes, as long as they match)\n\n* **Boolean** or **Logical** \n\n    + `logical`\n        - `TRUE` or `FALSE` (use operators such as *or*, *and* and *not*).\n        - They will evaluate to numbers where `FALSE` evaluates to zero, and `TRUE` evaluates to one.\n        - For example. if you enter `TRUE + 1` you will get `2` in return.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmode(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nTRUE + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n### Primitive Functions\n\nR uses functions to do all computations.\n\n#### Operators\n\n* Arithmetic Operators \n    + `+`, `-`, `*`, `/`, `^`\n\n* Comparison (also called Boolean, Logical or Predicate) Operators\n    + `<`,` >`,` ==`, `<=`, `>=`, `!=` \n    + less than, greater than, equal to, less than or equal to, greater than or equal to, not equal to\n    + return `TRUE` or `FALSE`\n* Logical Operator\n    + `&`, `|` ,`!`\n    + also return `TRUE` or `FALSE`\n* Other functions\n    + `mode()`\n    + `length()`\n    + `sum()`\n    + `sqrt()`\n    + `log()`\n    + `exp()`\n    \n* Assignment operators (assignment will be discussed below)\n    * `<-` **preferred assignment operator - always use this one**\n    * `=`  this will also work, but can be confusing (note different from `==`, the comparison operator)\n    * `->` is also an assignment operator, but we will not use it.\n    \n### Programming Languages are Not Forgiving\n\n#### Syntactically valid expressions\n\nExpressions must be syntactically valid. \n\n* syntax (form)\n  + English: \"cat dog boy\" - not syntactically valid\n  + English: \"cat hugs boy\" - syntactically valid\n  \n* programming language: \n    + \"hi\" 5 - not syntactically valid\n    + 3.2*5 - syntactically valid\n\n#### Semantically valid expressions\n\n* semantics - (meaning)\n    + English: \"I are hungry\" - syntactically valid but semantic error\n    + programming language: \n        - 3 + \"hi\" - semantic error (you can't use addition on  character strings)\n        \n* Chomsky:\n      \"colorless green ideas sleep furiously\"\n\nThis statement is syntactically valid, but does not make sense, so makes a semantic error.\n\n**In R you have to combine expressions in a way that R \"understands\" and this combination should be meaningful**.\n\n### Assignment\n\nWe will often want to save data in a variable. We can do that with **assignment**, which utilizes an assignment operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npet <- \"dog\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npet\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dog\"\n```\n:::\n:::\n\n\nAssignments are special expressions that are composed of three parts, a **name**, an **assignment operator**, and an **expression**.\n\nFor the following assignment,\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\n```\n:::\n\n\n`x` is the name, `<-` is the assignment operator, and `1:10` is an expression.\nNames in R can be anything that includes letters, numbers, a period (`.`) or an underscore (`_`), as long as it begins with either a letter or a period.\nHere are some valid, followed by invalid names\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Valid\nIQ\nc3p0\nHeight_inches\nweight.lbs\n.hidden\n\n# Invalid (you will get an error message)\n_cat\n1dog\n%sales\nHeigth-Inches\n```\n:::\n\nThere are also some names that cannot be used because they are names of primitive R objects (e.g. `if`, `for`, `else`, `in`).\nType `?reserved` in the R console for a complete list.\n\nThere are at least three assignment operators, as mentioned above, but it is commonly recommended that you use `<-`, because it makes clear that you are taking some expression  and putting it in an object. \nSo we would say of the assignment of `x <- 1:10` that x gets the integers 1 through 10, suggesting that we are putting the integers into the object `x`.\n\nJust about any expression can be passed to a name with the assignment operator.\n\n### Combining Expressions\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/blockstack.jpg){width=30%}\n:::\n:::\n\n\n\n### Complex Data Types\n\n* Scalars, Vectors, Matrices, and Arrays\n* Lists\n* Dataframes\n\n\n\n### Grouping Homogeneous Data Types\n\n* combining scalars\n```\nc()\n```\n* combining expressions\n```\n{}\n```\n* combining vectors\n```\ncbind()\nrbind()\n```\n\n\n### Complex Functions\n\n* Vectorization\n* Nested Functions\n* Loops and Conditional execution\n\n### Abstraction\n\n* Assignment\n* \n\n\n### Data Abstraction\n\n\n\n### Functional Abstraction\n\n\n### Anatomy of a Function\n\n```\nname <- function(arg_1, arg_2, ...) {\n    expression_1\n    expression_2\n    ...\n    output <- expression_3\n    return(output)\n}\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}